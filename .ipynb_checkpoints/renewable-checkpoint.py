# -*- coding: utf-8 -*-
"""Renewable

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18arx8qgJtpjPKK3G22hMv2omFj0OoROD

---


**Load Google Drive with Meteo** 

First you will need to 'Add to My Drive'. Then, the folder will appear in /content/drive/My Drive.
"""

# from google.colab import drive
# drive.mount('/content/gdrive')

"""**List Files**

Check the location of the files in your Drive

> Note that you need to download to My Drive and then link to the right folder
"""

# !ls -altr gdrive/'My Drive'/Path_to_Files/

"""---

**Load csv and excel files using pandas**


> Note that I have parsed the day and time into one variable
"""

# ==========================================================================
# ==========================================================================

import pandas as pd
import numpy as np
import datetime
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt

# ===================================================
desired_width = 320
pd.set_option('display.width', desired_width)  # Show columns horizontally in console
np.set_printoptions(linewidth=desired_width)
pd.set_option('display.max_columns', 100)  # Show as many columns as I want in console
pd.set_option('display.max_rows', 1000)  # Show as many rows as I want in console
# ===================================================

# Load the Pandas libraries with alias 'pd' 

# PATH = "gdrive/My Drive/Path_to_File/" \

PATH = "/Users/hramirez/GitHub/Renewable_Energy/files/"

Meteo = pd.read_csv(PATH + "Meteo.csv", parse_dates=[['Date', 'Time']])
# print(Meteo.head())

EXCEL = PATH + "Datos_solar_y_demanda_residencial.xlsx"
datos_solar = pd.read_excel(EXCEL)
# print(datos_solar.head())
# print(datos_solar.describe())

"""
**Get to a common timing for both datasets**
"""


def round_to_5min(t):
    delta = datetime.timedelta(minutes=t.minute % 5,
                               seconds=t.second,
                               microseconds=t.microsecond)
    t -= delta
    if delta > datetime.timedelta(0):
        t += datetime.timedelta(minutes=5)
    return t


Meteo['DateRound'] = Meteo["Date_Time"].dt.round("5min")
datos_solar['DateRound'] = datos_solar['Date'].dt.round("5min")

Meteo['Hour'] = Meteo['DateRound'].dt.hour
Meteo['Day'] = Meteo['DateRound'].dt.dayofyear
# print(Meteo.head())
# print(datos_solar.head())
# print(Meteo.columns)

"""
**Clean Meteo Frame from characters and columns that do not give information in this case: UV, Solar and Wind**
"""


def clean(x):
    try:
        return x.str.replace(r"[a-zA-Z\%\/Â²]", '')
    except:
        return x


Meteo = Meteo.apply(lambda x: clean(x))
Meteo = Meteo.drop(columns=['UV', 'Solar', 'Wind'])
# print(Meteo.head())

'''

import seaborn as sns
import matplotlib.pyplot as plt

fig, ax = plt.subplots(1, 2, figsize=(18, 4))

demanda_val = datos_solar['Demanda (W)'].values
time_val = datos_solar['DateRound'].values

temperatura_w = Meteo['Temperature'].values
time_val_w = Meteo['DateRound'].values

# plt.plot(time_val, demanda_val)
# plt.plot(time_val_w, temperatura_w)

sns.distplot(demanda_val, ax=ax[0], color='r')
ax[0].set_title('Just one random variable', fontsize=14)
ax[0].set_xlim([min(demanda_val), max(demanda_val)])

# plt.show()

'''

"""---
*Select* relevant variables for the final Meteo frame :

* For meteo variables **all** in this example

* From energy Meteo frame selection only 'Demanda (W)'
"""

data_filtered = Meteo[['DateRound', 'Temperature', 'Dew Point', 'Humidity', 'Speed', 'Gust', 'Pressure',
                       'Precip. Rate.', 'Precip. Accum.', 'Hour', 'Day']]
df_filtered = datos_solar[['DateRound', 'Demanda (W)']]

"""Merge both pandas based on datetime"""

pfinal = pd.merge(df_filtered, data_filtered, on='DateRound')
pfinal.columns
# remove date from list
del pfinal['DateRound']
# show final result
print(pfinal.head())

"""---
**Make a nice plot with all the values for all variables**
"""

'''
from matplotlib import pyplot

totalVariables = len(pfinal.columns)
values = pfinal.values

# specify columns to plot
i = 1
# plot each column
pyplot.rcParams['figure.figsize'] = [20, 10]

pyplot.figure()
for group in range(0, totalVariables):
    pyplot.subplot(totalVariables, 1, i)
    pyplot.plot(values[:, group])
    pyplot.title(pfinal.columns[group], y=0.5, loc='right')
    i += 1
pyplot.show()
'''

"""**Start with your code here ...**"""

# ===================================================
# convert series to supervised learning


from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout, Masking, Embedding
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from pandas import DataFrame, concat
from matplotlib import pyplot
from numpy import concatenate


# convert series to supervised learning
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    n_vars = 1 if type(data) is list else data.shape[1]
    df = DataFrame(data)
    cols, names = list(), list()
    # input sequence (t-n, ... t-1)
    for i in range(n_in, 0, -1):
        cols.append(df.shift(i))
        names += [('var%d(t-%d)' % (j + 1, i)) for j in range(n_vars)]
    # forecast sequence (t, t+1, ... t+n)
    for i in range(0, n_out):
        cols.append(df.shift(-i))
        if i == 0:
            names += [('var%d(t)' % (j + 1)) for j in range(n_vars)]
        else:
            names += [('var%d(t+%d)' % (j + 1, i)) for j in range(n_vars)]
    # put it all together
    agg = concat(cols, axis=1)
    agg.columns = names
    # drop rows with NaN values
    if dropnan:
        agg.dropna(inplace=True)
    return agg


# load dataset
values = pfinal.values
# specify columns to plot
totalVariables = 5

# specify columns to plot
i = 1
# plot each column
pyplot.rcParams['figure.figsize'] = [20, 10]

pyplot.figure()
for group in range(0, totalVariables + 1):
    pyplot.subplot(totalVariables + 1, 1, i)
    pyplot.plot(values[:, group])
    pyplot.title(pfinal.columns[group], y=0.5, loc='right')
    i += 1
pyplot.show()

n_hours = 3
n_out = 1
n_features = totalVariables

# integer encode direction
encoder = LabelEncoder()
values[:, 4] = encoder.fit_transform(values[:, 4])
# ensure all data is float
values = values.astype('float32')
# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# specify the number of lag hours
# frame as supervised learning
reframed = series_to_supervised(scaled, n_hours, n_out)
print(reframed.shape)

# split into train and test sets
values = reframed.values
#  V:need to check this syntax
n_train_hours = int(len(values) * 0.9)
train = values[:n_train_hours, :]
test = values[n_train_hours:, :]
# split into input and outputs
n_obs = n_hours * n_features
train_X, train_y = train[:, :n_obs], train[:, -n_features]
test_X, test_y = test[:, :n_obs], test[:, -n_features]
print(train_X.shape, len(train_X), train_y.shape)
# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], n_hours, n_features))
test_X = test_X.reshape((test_X.shape[0], n_hours, n_features))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

'''
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

pca = PCA(n_components=3)
pca.fit(train_X)


train_X.shape

plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.xlabel('Number of components')
plt.ylabel('Cumulative explained variance')
'''

# design network
model = Sequential()
model.add(LSTM(50, input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dense(1))
model.compile(loss='mae', optimizer='adam')

# Run network
history = model.fit(train_X, train_y, epochs=50, batch_size=72, validation_data=(test_X, test_y), verbose=2,
                    shuffle=False)

# plot history
pyplot.plot(history.history['loss'], label='train')
pyplot.plot(history.history['val_loss'], label='test')
pyplot.legend()
pyplot.show()

yhat = model.predict(test_X)
print(test_X.shape, yhat.shape)
test_X = test_X.reshape((test_X.shape[0], n_obs))

# invert scaling for forecast
inv_yhat = concatenate((yhat, test_X[:, 1:scaled.shape[1]]), axis=1)
inv_yhat = scaler.inverse_transform(inv_yhat)
inv_yhat = inv_yhat[:, 0]

# invert scaling for actual
test_y = test_y.reshape((len(test_y), 1))
inv_y = concatenate((test_y, test_X[:, 1:scaled.shape[1]]), axis=1)
inv_y = scaler.inverse_transform(inv_y)
inv_y = inv_y[:, 0]

# calculate RMSE
from math import sqrt

rmse = sqrt(mean_squared_error(inv_y, inv_yhat))
print('Test RMSE: %.3f' % rmse)

# plot history
pyplot.figure(figsize=(15, 10))
pyplot.plot(inv_y, label='data')
pyplot.plot(inv_yhat, label='prediction')
pyplot.legend()
pyplot.show()
pyplot.savefig('predvsdata.pdf')

error = 100 * (inv_y - inv_yhat) / (inv_y + inv_yhat)
print(error.mean())
